"""Add detailed analysis tables

Revision ID: 294a932652f0
Revises: 
Create Date: 2025-06-16 09:47:06.148830

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '294a932652f0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reference_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('elo_range_min', sa.Integer(), nullable=False),
    sa.Column('elo_range_max', sa.Integer(), nullable=False),
    sa.Column('expected_acpl', sa.Float(), nullable=False),
    sa.Column('expected_match_rate', sa.Float(), nullable=False),
    sa.Column('expected_time_variance', sa.Float(), nullable=False),
    sa.Column('expected_opening_entropy', sa.Float(), nullable=False),
    sa.Column('std_acpl', sa.Float(), nullable=False),
    sa.Column('std_match_rate', sa.Float(), nullable=False),
    sa.Column('std_time_variance', sa.Float(), nullable=False),
    sa.Column('std_opening_entropy', sa.Float(), nullable=False),
    sa.Column('sample_size', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_analysis_detailed',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('acpl', sa.Float(), nullable=False),
    sa.Column('match_rate', sa.Float(), nullable=False),
    sa.Column('weighted_match_rate', sa.Float(), nullable=False),
    sa.Column('ipr', sa.Float(), nullable=False),
    sa.Column('ipr_z_score', sa.Float(), nullable=False),
    sa.Column('precision_burst_count', sa.Integer(), nullable=False),
    sa.Column('mean_move_time', sa.Float(), nullable=False),
    sa.Column('time_variance', sa.Float(), nullable=False),
    sa.Column('time_complexity_corr', sa.Float(), nullable=False),
    sa.Column('lag_spike_count', sa.Integer(), nullable=False),
    sa.Column('uniformity_score', sa.Float(), nullable=False),
    sa.Column('clutch_accuracy_diff', sa.Float(), nullable=True),
    sa.Column('opening_entropy', sa.Float(), nullable=False),
    sa.Column('novelty_depth', sa.Integer(), nullable=True),
    sa.Column('second_choice_rate', sa.Float(), nullable=False),
    sa.Column('opening_breadth', sa.Integer(), nullable=False),
    sa.Column('tb_match_rate', sa.Float(), nullable=True),
    sa.Column('dtz_deviation', sa.Float(), nullable=True),
    sa.Column('conversion_efficiency', sa.Integer(), nullable=True),
    sa.Column('suspicious_quality', sa.Boolean(), nullable=False),
    sa.Column('suspicious_timing', sa.Boolean(), nullable=False),
    sa.Column('suspicious_opening', sa.Boolean(), nullable=False),
    sa.Column('overall_suspicion_score', sa.Float(), nullable=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.PrimaryKeyConstraint('game_id')
    )
    op.create_table('player_analysis_detailed',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('games_analyzed', sa.Integer(), nullable=False),
    sa.Column('avg_acpl', sa.Float(), nullable=False),
    sa.Column('avg_match_rate', sa.Float(), nullable=False),
    sa.Column('avg_ipr', sa.Float(), nullable=False),
    sa.Column('std_acpl', sa.Float(), nullable=False),
    sa.Column('std_match_rate', sa.Float(), nullable=False),
    sa.Column('roi_mean', sa.Float(), nullable=False),
    sa.Column('roi_max', sa.Float(), nullable=False),
    sa.Column('roi_std', sa.Float(), nullable=False),
    sa.Column('step_function_detected', sa.Boolean(), nullable=False),
    sa.Column('step_function_magnitude', sa.Float(), nullable=True),
    sa.Column('peer_delta_acpl', sa.Float(), nullable=False),
    sa.Column('peer_delta_match', sa.Float(), nullable=False),
    sa.Column('longest_streak', sa.Integer(), nullable=False),
    sa.Column('selectivity_score', sa.Float(), nullable=False),
    sa.Column('time_patterns', sa.JSON(), nullable=True),
    sa.Column('opening_patterns', sa.JSON(), nullable=True),
    sa.Column('suspicious_games_ids', sa.JSON(), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=False),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=False),
    sa.Column('first_game_date', sa.DateTime(), nullable=True),
    sa.Column('last_game_date', sa.DateTime(), nullable=True),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['username'], ['player.username'], ),
    sa.PrimaryKeyConstraint('username')
    )
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.add_column('game', sa.Column('white_elo', sa.Integer(), nullable=True))
    op.add_column('game', sa.Column('black_elo', sa.Integer(), nullable=True))
    op.add_column('game', sa.Column('time_control', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('game', sa.Column('termination', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('moveanalysis', sa.Column('eval_before', sa.Integer(), nullable=True))
    op.add_column('moveanalysis', sa.Column('eval_after', sa.Integer(), nullable=True))
    op.add_column('moveanalysis', sa.Column('legal_moves_count', sa.Integer(), nullable=True))
    op.add_column('moveanalysis', sa.Column('time_spent', sa.Float(), nullable=True))
    op.add_column('player', sa.Column('total_games', sa.Integer(), nullable=True))
    op.add_column('player', sa.Column('done_games', sa.Integer(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('player', 'done_games')
    op.drop_column('player', 'total_games')
    op.drop_column('moveanalysis', 'time_spent')
    op.drop_column('moveanalysis', 'legal_moves_count')
    op.drop_column('moveanalysis', 'eval_after')
    op.drop_column('moveanalysis', 'eval_before')
    op.drop_column('game', 'termination')
    op.drop_column('game', 'time_control')
    op.drop_column('game', 'black_elo')
    op.drop_column('game', 'white_elo')
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    sa.UniqueConstraint('email', name=op.f('user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.drop_table('player_analysis_detailed')
    op.drop_table('game_analysis_detailed')
    op.drop_table('reference_stats')
    # ### end Alembic commands ###
