"""base schema"""

from alembic import op
import sqlalchemy as sa
import sqlmodel



# revision identifiers, used by Alembic.
revision = 'b3c7b9236edd'
down_revision = None
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('game',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('pgn', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('move_times', sa.JSON(), nullable=True),
    sa.Column('eco_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('opening_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('white_username', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('black_username', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('white_elo', sa.Integer(), nullable=True),
    sa.Column('black_elo', sa.Integer(), nullable=True),
    sa.Column('time_control', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('termination', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('not_analyzed', 'pending', 'ready', 'error', name='player_status'), nullable=False),
    sa.Column('progress', sa.Integer(), nullable=False),
    sa.Column('total_games', sa.Integer(), nullable=True),
    sa.Column('done_games', sa.Integer(), nullable=True),
    sa.Column('requested_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('username')
    )
    op.create_table('playermetrics',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('game_count', sa.Integer(), nullable=False),
    sa.Column('opening_entropy', sa.Float(), nullable=False),
    sa.Column('most_played', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('low_entropy', sa.Boolean(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('username')
    )
    op.create_table('reference_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('elo_range_min', sa.Integer(), nullable=False),
    sa.Column('elo_range_max', sa.Integer(), nullable=False),
    sa.Column('expected_acpl', sa.Float(), nullable=False),
    sa.Column('expected_match_rate', sa.Float(), nullable=False),
    sa.Column('expected_time_variance', sa.Float(), nullable=False),
    sa.Column('expected_opening_entropy', sa.Float(), nullable=False),
    sa.Column('std_acpl', sa.Float(), nullable=False),
    sa.Column('std_match_rate', sa.Float(), nullable=False),
    sa.Column('std_time_variance', sa.Float(), nullable=False),
    sa.Column('std_opening_entropy', sa.Float(), nullable=False),
    sa.Column('sample_size', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_analysis_detailed',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('acpl', sa.Float(), nullable=False),
    sa.Column('match_rate', sa.Float(), nullable=False),
    sa.Column('weighted_match_rate', sa.Float(), nullable=False),
    sa.Column('ipr', sa.Float(), nullable=False),
    sa.Column('ipr_z_score', sa.Float(), nullable=False),
    sa.Column('precision_burst_count', sa.Integer(), nullable=False),
    sa.Column('mean_move_time', sa.Float(), nullable=False),
    sa.Column('time_variance', sa.Float(), nullable=False),
    sa.Column('time_complexity_corr', sa.Float(), nullable=False),
    sa.Column('lag_spike_count', sa.Integer(), nullable=False),
    sa.Column('uniformity_score', sa.Float(), nullable=False),
    sa.Column('clutch_accuracy_diff', sa.Float(), nullable=True),
    sa.Column('opening_entropy', sa.Float(), nullable=False),
    sa.Column('novelty_depth', sa.Integer(), nullable=True),
    sa.Column('second_choice_rate', sa.Float(), nullable=False),
    sa.Column('opening_breadth', sa.Integer(), nullable=False),
    sa.Column('tb_match_rate', sa.Float(), nullable=True),
    sa.Column('dtz_deviation', sa.Float(), nullable=True),
    sa.Column('conversion_efficiency', sa.Integer(), nullable=True),
    sa.Column('suspicious_quality', sa.Boolean(), nullable=False),
    sa.Column('suspicious_timing', sa.Boolean(), nullable=False),
    sa.Column('suspicious_opening', sa.Boolean(), nullable=False),
    sa.Column('overall_suspicion_score', sa.Float(), nullable=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.PrimaryKeyConstraint('game_id')
    )
    op.create_table('gamemetrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('sigma_total', sa.Float(), nullable=True),
    sa.Column('constant_time', sa.Boolean(), nullable=False),
    sa.Column('pause_spike', sa.Boolean(), nullable=False),
    sa.Column('pct_top1', sa.Float(), nullable=False),
    sa.Column('pct_top3', sa.Float(), nullable=False),
    sa.Column('acl', sa.Float(), nullable=False),
    sa.Column('suspicious', sa.Boolean(), nullable=False),
    sa.Column('computed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('game_id')
    )
    op.create_table('moveanalysis',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('move_number', sa.Integer(), nullable=False),
    sa.Column('played', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('best', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('best_rank', sa.Integer(), nullable=False),
    sa.Column('cp_loss', sa.Integer(), nullable=False),
    sa.Column('eval_before', sa.Integer(), nullable=True),
    sa.Column('eval_after', sa.Integer(), nullable=True),
    sa.Column('legal_moves_count', sa.Integer(), nullable=True),
    sa.Column('time_spent', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_analysis_detailed',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('games_analyzed', sa.Integer(), nullable=False),
    sa.Column('avg_acpl', sa.Float(), nullable=False),
    sa.Column('avg_match_rate', sa.Float(), nullable=False),
    sa.Column('avg_ipr', sa.Float(), nullable=False),
    sa.Column('std_acpl', sa.Float(), nullable=False),
    sa.Column('std_match_rate', sa.Float(), nullable=False),
    sa.Column('roi_mean', sa.Float(), nullable=False),
    sa.Column('roi_max', sa.Float(), nullable=False),
    sa.Column('roi_std', sa.Float(), nullable=False),
    sa.Column('step_function_detected', sa.Boolean(), nullable=False),
    sa.Column('step_function_magnitude', sa.Float(), nullable=True),
    sa.Column('peer_delta_acpl', sa.Float(), nullable=False),
    sa.Column('peer_delta_match', sa.Float(), nullable=False),
    sa.Column('longest_streak', sa.Integer(), nullable=False),
    sa.Column('selectivity_score', sa.Float(), nullable=False),
    sa.Column('time_patterns', sa.JSON(), nullable=True),
    sa.Column('opening_patterns', sa.JSON(), nullable=True),
    sa.Column('suspicious_games_ids', sa.JSON(), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=False),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=False),
    sa.Column('first_game_date', sa.DateTime(), nullable=True),
    sa.Column('last_game_date', sa.DateTime(), nullable=True),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['username'], ['player.username'], ),
    sa.PrimaryKeyConstraint('username')
    )
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('player_analysis_detailed')
    op.drop_table('moveanalysis')
    op.drop_table('gamemetrics')
    op.drop_table('game_analysis_detailed')
    op.drop_table('reference_stats')
    op.drop_table('playermetrics')
    op.drop_table('player')
    op.drop_table('game')
    # ### end Alembic commands ###
